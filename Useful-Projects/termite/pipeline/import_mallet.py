#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import argparse
import ConfigParser
import logging

from utf8_utils import UnicodeReader
from api_utils import ModelAPI

class ImportMallet( object ):

	"""
	Copies mallet file formats into Termite internal format.
	"""
	
	# Files generated by Mallet
	TOPIC_WORD_WEIGHTS = 'topic-word-weights.txt'
	
	def __init__( self, logging_level ):
		self.logger = logging.getLogger( 'ImportMallet' )
		self.logger.setLevel( logging_level )
		handler = logging.StreamHandler( sys.stderr )
		handler.setLevel( logging_level )
		self.logger.addHandler( handler )
	
	def execute( self, model_library, model_path, data_path ):
		
		assert model_library is not None
		assert model_library == 'mallet'
		assert model_path is not None
		assert data_path is not None
		
		self.logger.info( '--------------------------------------------------------------------------------' )
		self.logger.info( 'Importing a Mallet model...'                                                      )
		self.logger.info( '    topic model = %s (%s)', model_path, model_library                             )
		self.logger.info( '    output = %s', data_path                                                       )
		
		self.logger.info( 'Connecting to data...' )
		self.model = ModelAPI( data_path )
		
		self.logger.info( 'Reading "%s" from Mallet...', ImportMallet.TOPIC_WORD_WEIGHTS )
		self.extractTopicWordWeights( model_path )
		
		self.logger.info( 'Writing data to disk...' )
		self.model.write()
		
		self.logger.info( '--------------------------------------------------------------------------------' )
	
	def extractTopicWordWeights( self, model_path ):
		data = {}
		words = []
		topics = []
		
		# Read in content of file (sparse matrix representation)
		filename = '{}/{}'.format( model_path, ImportMallet.TOPIC_WORD_WEIGHTS )
		with open( filename, 'r' ) as f:
			lines = UnicodeReader( f )
			for (topic, word, value) in lines:
				topic = int(topic)
				if topic not in data:
					data[ topic ] = {}
				data[ topic ][ word ] = float(value)
				words.append( word )
				topics.append( topic )
		
		# Get list of terms and topic indexes
		term_index = sorted( list( frozenset( words ) ) )
		topic_index = sorted( list( frozenset( topics ) ) )
		
		# Build dense matrix representation
		matrix = []
		for term in term_index :
			row = []
			for topic in topic_index :
				row.append( data[ topic ][ term ] )
			matrix.append( row )
		
		# Generate topic labels
		topic_str_index = [ 'Topic {}'.format(d) for d in topic_index ]
		
		self.model.term_topic_matrix = matrix
		self.model.term_index = term_index
		self.model.topic_index = topic_str_index

def main():
	parser = argparse.ArgumentParser( description = 'Import results from Mallet topic model library into Termite.' )
	parser.add_argument( 'config_file'          , type = str, default = None        , help = 'Path of Termite configuration file.' )
	parser.add_argument( '--topic-model-library', type = str, dest = 'model_library', help = 'Override topic model library.'       )
	parser.add_argument( '--topic-model-path'   , type = str, dest = 'model_path'   , help = 'Override topic model path.'          )
	parser.add_argument( '--data-path'          , type = str, dest = 'data_path'    , help = 'Override data path.'                 )
	parser.add_argument( '--logging'            , type = int, dest = 'logging'      , help = 'Override logging level.'             )
	args = parser.parse_args()
	
	model_library = None
	model_path = None
	data_path = None
	logging_level = 20
	
	# Read in default values from the configuration file
	config = ConfigParser.RawConfigParser()
	config.read( args.config_file )
	model_library = config.get( 'TopicModel', 'library' )
	model_path = config.get( 'TopicModel', 'path' )
	data_path = config.get( 'Termite', 'path' )
	if config.has_section( 'Misc' ):
		if config.has_option( 'Misc', 'logging' ):
			logging_level = config.getint( 'Misc', 'logging' )
	
	# Read in user-specifiec values from the program arguments
	if args.model_library is not None:
		model_library = args.model_library
	if args.model_path is not None:
		model_path = args.model_path
	if args.data_path is not None:
		data_path = args.data_path
	if args.logging is not None:
		logging_level = args.logging
	
	ImportMallet( logging_level ).execute( model_library, model_path, data_path )

if __name__ == '__main__':
	main()